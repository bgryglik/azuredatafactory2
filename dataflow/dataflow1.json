{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "telemetricimport"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "errors"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "failures"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "pivottableerrors"
				},
				{
					"name": "jointables"
				},
				{
					"name": "select"
				},
				{
					"name": "window3"
				},
				{
					"name": "window24"
				},
				{
					"name": "pivottablefailures"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string",
				"}",
				"source(output(",
				"          datetime as string,",
				"          machineID as string,",
				"          volt as string,",
				"          rotate as string,",
				"          pressure as string,",
				"          vibration as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> telemetricimport",
				"source(output(",
				"          datetime as string,",
				"          machineID as string,",
				"          failure as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> errors",
				"source(output(",
				"          datetime as string,",
				"          machineID as string,",
				"          failure as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> failures",
				"errors pivot(groupBy(datetime,",
				"          machineID),",
				"     pivotBy(errorID),",
				"     zygmunt = count(errorID),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> pivottableerrors",
				"telemetricimport, pivottableerrors join(telemetricimport@datetime == pivottableerrors@datetime",
				"     && telemetricimport@machineID == pivottableerrors@machineID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> jointables",
				"jointables select(mapColumn(",
				"          datetime = telemetricimport@datetime,",
				"          machineID = telemetricimport@machineID,",
				"          volt,",
				"          rotate,",
				"          pressure,",
				"          vibration,",
				"          datetime = pivottableerrors@datetime,",
				"          machineID = pivottableerrors@machineID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select window(asc(datetime, true),",
				"     startRowOffset: -3L,",
				"     endRowOffset: 0L,",
				"     mean_rotate_3h = mean(rotate),",
				"          mean_pressure_3h = mean(pressure),",
				"          mean_vibration_3h = mean(vibration),",
				"          mean_volt_3h = mean(volt),",
				"          stddev_volt_3h = stddev(volt),",
				"     rangeSpecified: true) ~> window3",
				"window3 window(asc(datetime, true),",
				"     startRowOffset: -24L,",
				"     endRowOffset: 0L,",
				"     mean_rotate_24h = mean(rotate),",
				"          mean_volt_24h = mean(volt),",
				"     rangeSpecified: true) ~> window24",
				"failures pivot(groupBy(datetime,",
				"          machineID),",
				"     pivotBy(failure),",
				"     kacper = count(failure),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> pivottablefailures"
			]
		}
	}
}